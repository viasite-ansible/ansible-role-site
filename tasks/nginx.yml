---
- name: "{{ site_domain}} : Define site_nginx_proxy_to_backend"
  set_fact:
    site_nginx_proxy_to_backend: |
      {% if site_nginx_backend == 'apache' %}
      proxy_pass http://apache;
      {{ site_nginx_proxy_params }}
      # for pass Basic auth from nginx to php-fpm for bitrix
      proxy_set_header REMOTE_USER $remote_user;
      proxy_set_header X-Forwarded-User $remote_user;
      proxy_set_header Authorization $http_authorization;
      {% endif %}

      {% if site_nginx_backend == 'php-fpm' %}
      include {% if site_nginx_engine == 'drupal' %}snippets/fastcgi_drupal.conf{% else %}fastcgi.conf{% endif %};
      fastcgi_pass unix:{{ site_php_socket }};{% endif %}

      {% if site_nginx_backend == 'service' %}
      proxy_pass http://{{ site_nginx_service_host }}{% if site_nginx_service_port is defined %}:{{ site_nginx_service_port }}{% endif %};
      {{ site_nginx_proxy_params }}
      {% endif %}

- name: "{{ site_domain}} : Define site_nginx_location_php"
  set_fact:
    site_nginx_location_php: |
      # need for urls such /index.php
      location ~* ^.+\.php$ {
        {{ site_nginx_proxy_to_backend | indent(2) }}
      }

- name: "{{ site_domain}} : Define site_nginx_location_rewrite"
  set_fact:
    site_nginx_location_rewrite: |
      location @rewrite {
        access_log /var/log/nginx/access.log combined_host;
        access_log /var/log/nginx/access_time.log combined_host_time;

        {{ site_nginx_proxy_to_backend | indent(2) }}

        {% if nginx_cloudflare_log is defined and nginx_cloudflare_log %}
        access_log /var/log/nginx/access.log combined_host;
        access_log /var/log/nginx/access_cloudflare.log combined_host_cloudflare;{% endif %}
      }
      # end of @rewrite
  when: site_nginx_location_rewrite is not defined

- name: "{{ site_domain}} : Define site_nginx_engine_server"
  set_fact:
    site_nginx_engine_server: "{{ lookup('template', 'nginx/engine/' + site_nginx_engine + '.j2') }}"
  when: not site_nginx_engine_server

- name: "{{ site_domain}} : Define site_nginx_config"
  set_fact:
    site_nginx_config: "{% if site_ssl %}https{% else %}http{% endif %}"
  when: not site_nginx_config

- name: "{{ site_domain}} : Define site_nginx_template"
  set_fact:
    site_nginx_template: "nginx/config/{{ site_nginx_config }}.j2"
  when: not site_nginx_template

- name: "{{ site_domain}} : Define ssl_certificate variables"
  set_fact:
    site_ssl_certificate: "/etc/letsencrypt/live/{{ site_domain_main }}/fullchain.pem"
    site_ssl_certificate_key: "/etc/letsencrypt/live/{{ site_domain_main }}/privkey.pem"
  when: not site_ssl_certificate and not site_ssl_certificate_key


- name: "{{ site_domain}} : Generate variables"
  set_fact:
    nginx_sites_empty: {}

- name: "{{ site_domain}} : Setup nginx vhost"
  include_role:
    name: nginx-vhosts
  vars:
    nginx_sites: "{{ nginx_sites_empty | combine({
      site_domain_main: { 'template': site_nginx_template }
    }) }}"
    nginx_remove_sites: "{{ site_domains_remove }}"

- name: "{{ site_domain}} : Ensure Diffie-Helmann parameters dhparam.pem exists when ssl site provisioned"
  command: openssl dhparam -out /etc/ssl/certs/dhparam.pem 2048
  args:
    creates: /etc/ssl/certs/dhparam.pem
  when: site_ssl
